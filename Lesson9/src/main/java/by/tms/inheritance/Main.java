package by.tms.inheritance;

/**
 * Разработать иерархию классов подобную схеме:
 * <p>
 * Имена классов пишутся с большой буквы!!!!
 * <p>
 * В классе Транспорт есть поля:
 * - Мощность(в лошадиных силах)
 * - Максимальная скорость(км/ч)
 * - Масса (кг)
 * - Марка( например: Audi, BMW , Boing, Airbus, Scania , МАЗ и т.д. )
 * В классе Наземный добавляются поля:
 * -Количество колёс
 * - Расход топлива(л/100км)
 * В классе Легковой добавляются поля:
 * - Тип кузова
 * - Кол-во пассажиров
 * В классе Грузовой добавляется поле:
 * - Грузоподъёмность(т)
 * <p>
 * Транспорт
 * <p>
 * Наземный Воздушный
 * <p>
 * Легковой Грузовой Гражданский Военный
 * <p>
 * В классе Воздушный добавляются поля:
 * - Размах крыльев (м)
 * - Минимальная длина взлётно-посадочной полосы для взлёта
 * В классе Гражданский добавляются поля:
 * - Кол-во пассажиров
 * - Наличие бизнес класса (true/false)
 * В классе Военный добавляются поля:
 * - Наличие системы катапультирования (true/false)
 * - Кол-во ракет на борту
 * <p>
 * Имена классов пишутся с большой буквы!!!!
 * <p>
 * В конечных классах (Легковой, Грузовой, Военный, Гражданский)
 * разработать метод описание который будет возвращать составленную строку
 * с описанием всех характеристик объекта. В строку включить ещё один
 * параметр мощность в киловаттах (кВ) . Расчёт мощности в киловаттах
 * производится в отдельном методе :
 * <p>
 * 1 л.с = 0.74 кВ
 * <p>
 * Для легкового разработать метод который будет принимать время и считать
 * сколько километров проедет машина двигаясь с максимальной скоростью и
 * сколько топлива она израсходует за это время, результат вывести в консоль,
 * расчёт израсходуемого топлива вынести в отдельный метод private.
 * <p>
 * Результат работы метода должен вывести такую строчку:
 * За время (ваше введённое время) ч, автомобиль (марка автомобиля)
 * двигаясь с максимальной скоростью (ваша максимальная скорость) км/ч
 * проедет (xxx) км и израсходует (xxx) литров топлива.
 * <p>
 * Мой результат выглядит так:
 * <p>
 * Для грузового разработать метод который проверит можно ли загрузить в
 * него xxx груза
 * Метод должен проверять если это кол-во груза помещается в грузовик то
 * выводит в консоль ”Грузовик загружен”, если кол-во груза которое нужно
 * загрузить больше чем то которое может влезть в наш грузовик то выводим
 * “Вам нужен грузовик побольше ”.
 * Такой же метод делаем для Гражданских самолётов, только проверяем
 * вместимость пассажиров.
 * Для Военных самолётов делаем метод выстрел, проверяем если кол-во
 * ракет не равно 0 то выводим на консоль “ Ракета пошла...”, если 0 то
 * “Боеприпасы отсутствуют”.
 * А так же метод катапультирование, который проверит если наличие системы
 * катапультирования true, то выводим “Катапультирование прошло успешно”,
 * если false, то “У вас нет такой системы ”
 */

public class Main {
    public static void main(String[] args) {
        Passenger passenger = new Passenger();
        passenger.setBrand("Mercedes");
        passenger.setPower(120);
        passenger.setSpeedMax(260);
        passenger.setWeight(2.5);
        passenger.setNumberOfWheels(4);
        passenger.setAverageFuelConsumption(6.5);
        passenger.setBodyType("sedan");
        passenger.setNumberOfPassengers(5);

        System.out.println(passenger.getDescription());
        System.out.println("-----------------------------------------------");
        System.out.println(passenger.calculateRangeAndVolume(2.5));
        System.out.println("-----------------------------------------------");

        Cargo cargo = new Cargo();
        cargo.setBrand("MAN");
        cargo.setPower(220);
        cargo.setSpeedMax(190);
        cargo.setWeight(4.5);
        cargo.setNumberOfWheels(4);
        cargo.setAverageFuelConsumption(21.5);
        cargo.setLoadCapacity(15);

        System.out.println(cargo.getDescription());
        System.out.println("-----------------------------------------------");
        cargo.checkLoadCapacity(14);
        System.out.println("-----------------------------------------------");

        Civil civil = Civil.builder()
                .brand("Boeing 737")
                .power(800)
                .speedMax(817)
                .weight(43.998)
                .wingspan(28.35)
                .minRunway(1.29)
                .numberOfPassengers(103)
                .businessClassAvailability(true)
                .build();
        System.out.println(civil.getDescription());
        System.out.println("-----------------------------------------------");

        Military military = Military.builder()
                .brand("Су-25")
                .power(800)
                .speedMax(970)
                .weight(17.533)
                .wingspan(14.36)
                .minRunway(1.29)
                .numberOfMissiles(6)
                .ejectionSystemAvailability(true)
                .build();
        System.out.println(military.getDescription());
        military.takeShot();
        military.takeShot();
        military.takeShot();
        military.takeShot();
        military.takeShot();
        military.takeShot();
        military.takeShot();
        military.makeEjection();
        System.out.println("-----------------------------------------------");
    }
}
